{"version":3,"file":"static/js/387.173bb9fd.chunk.js","mappings":"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","sources":["api/Api.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'ad44d97ced0f33607d2b02fad9916bd8';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getFilmById', error);\n  }\n};\n\nexport const getFilmByKeyword = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getFilmByKeyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getFilmReviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n  return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n\nexport function sliceVoteAverage(voteAverage) {\n  const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n  return sliceVoteAverage;\n}\n\nexport function getPecentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const sliceVote = sliceVoteAverage(voteAverage);\n  const percentValue = (sliceVote / 10) * 100;\n  const percent = parseFloat(percentValue.toFixed(1));\n  return `${percent}%`;\n}\n","import styled from 'styled-components';\n\nexport const CastGallery = styled.ul`\n  margin-left: auto;\n  margin-right: auto;\n  margin-bottom: 40px;\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n  gap: 20px;\n  max-width: 1200px;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  border-radius: 20px;\n  background: #e0e0e0;\n  box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;\n  max-width: 240px;\n`;\n\nexport const CastImg = styled.img`\n  border-top-left-radius: 20px;\n  border-top-right-radius: 20px;\n  object-fit: cover;\n  object-position: top;\n  width: 240px;\n  height: 320px;\n`;\n\nexport const CastName = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n  font-family: 'Montserrat', sans-serif;\n  letter-spacing: -0.2px;\n  text-shadow: -2px -2px 5px #fff, 2px 2px 5px #babecc;\n`;\n\nexport const Role = styled.p`\n  font-size: 18px;\n  font-weight: 700;\n  font-family: 'Montserrat', sans-serif;\n  letter-spacing: -0.2px;\n  text-shadow: -2px -2px 5px #fff, 2px 2px 5px #babecc;\n  padding: 10px;\n`;\n","import { Loader } from 'components/Loader/Loader';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPosterFilm, getFilmCast } from 'api/Api';\nimport { CastGallery, CastItem, CastImg, CastName, Role } from './Cast.styled';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getCast = async () => {\n      try {\n        const cast = await getFilmCast(movieId);\n        setCast(cast);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        console.log('Error in Cast', error);\n      }\n    };\n    getCast();\n  }, [movieId]);\n\n  if (!cast) {\n    return;\n  }\n\n  return (\n    <>\n      {!isLoading && cast.length > 0 && (\n        <CastGallery>\n          {cast.map(({ cast_id, name, character, profile_path }) => (\n            <CastItem key={cast_id}>\n              <CastImg src={getPosterFilm(profile_path)} alt={name} />\n              <CastName>{name}</CastName>\n              <Role>Character: {character}</Role>\n            </CastItem>\n          ))}\n        </CastGallery>\n      )}\n      {isLoading && <Loader />}\n      {cast.length === 0 && !isLoading && (\n        <div>We didn't find any actors :( </div>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["API_KEY","axios","getFilmById","movieId","response","movieInfo","data","console","log","getFilmByKeyword","movie","searchMovie","results","getFilmCast","cast","getFilmReviews","reviews","getDate","date","split","getPosterFilm","posterPath","getGenres","genres","map","genre","name","join","sliceVoteAverage","voteAverage","parseFloat","toFixed","getPecentageValue","sliceVote","percent","CastGallery","styled","CastItem","CastImg","CastName","Role","useState","setCast","isLoading","setIsLoading","useParams","useEffect","getCast","length","cast_id","character","profile_path","src","alt","Loader"],"sourceRoot":""}