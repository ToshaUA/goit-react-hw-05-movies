{"version":3,"file":"static/js/304.f9285358.chunk.js","mappings":"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","sources":["api/Api.js","components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.jsx","pages/Home/Home.styled.js","pages/Home/Home.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = 'ad44d97ced0f33607d2b02fad9916bd8';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getFilmById', error);\n  }\n};\n\nexport const getFilmByKeyword = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getFilmByKeyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getFilmReviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n  return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n\nexport function sliceVoteAverage(voteAverage) {\n  const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n  return sliceVoteAverage;\n}\n\nexport function getPecentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const sliceVote = sliceVoteAverage(voteAverage);\n  const percentValue = (sliceVote / 10) * 100;\n  const percent = parseFloat(percentValue.toFixed(1));\n  return `${percent}%`;\n}\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MovieList = styled.ul`\n  margin-left: auto;\n  margin-right: auto;\n  padding: 10px;\n  margin-bottom: 40px;\n  display: flex;\n  justify-content: space-evenly;\n  flex-wrap: wrap;\n  gap: 30px;\n  max-width: 1200px;\n`;\n\nexport const LinkStyled = styled(Link)`\n  display: block;\n  color: #000;\n  transform: scale(1);\n  transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n  border-top-right-radius: 50px;\n  :hover,\n  :focus {\n    box-shadow: -2px -2px 5px #fff, 2px 2px 5px #babecc;\n    transition: transform 350ms cubic-bezier(0.4, 0, 0.2, 1);\n    transform: scale(1.05);\n  }\n`;\n\nexport const FilmCard = styled.div`\n  width: 320px;\n  cursor: pointer;\n`;\n\nexport const FilmInfoWrapper = styled.div`\n  flex-direction: column;\n  display: flex;\n  align-items: flex-start;\n  padding: 10px;\n`;\n\nexport const FilmTitle = styled.p`\n  font-size: 20px;\n  font-weight: 700;\n  line-height: 1.2;\n  text-transform: uppercase;\n  margin-bottom: 3px;\n  font-family: 'Montserrat', sans-serif;\n  letter-spacing: -0.2px;\n  text-shadow: -2px -2px 5px #fff, 2px 2px 5px #babecc;\n`;\n\nexport const FilmDescWrapper = styled.div`\n  align-items: center;\n  display: flex;\n  font-family: 'Montserrat', sans-serif;\n  letter-spacing: -0.2px;\n  text-shadow: -2px -2px 5px #fff, 2px 2px 5px #babecc;\n`;\n\nexport const FilmPoster = styled.img`\n  object-fit: cover;\n  width: 320px;\n  height: 480px;\n  border-top-right-radius: 50px;\n  border-top-left-radius: 10px;\n  background: linear-gradient(145deg, #f0f0f0, #cacaca);\n  box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;\n`;\n","import { useLocation } from 'react-router-dom';\nimport { getDate, getPosterFilm, sliceVoteAverage } from '../../api/Api';\nimport {\n  LinkStyled,\n  FilmCard,\n  FilmInfoWrapper,\n  FilmTitle,\n  FilmDescWrapper,\n  FilmPoster,\n  MovieList,\n} from './MoviesList.styled';\nimport PropTypes from 'prop-types';\n\nexport const MoviesList = ({ movies = [] }) => {\n  const location = useLocation();\n\n  if (!movies) {\n    return;\n  }\n\n  return (\n    <MovieList>\n      {movies.map(({ id, poster_path, title, vote_average, release_date }) => (\n        <FilmCard key={id}>\n          <LinkStyled to={`/movies/${id}`} state={{ from: location }}>\n            <FilmPoster src={getPosterFilm(poster_path)} alt={title} />\n            <FilmInfoWrapper>\n              <FilmTitle>{title}</FilmTitle>\n              <FilmDescWrapper>\n                <p>\n                  Vote: {sliceVoteAverage(vote_average)} |{' '}\n                  {getDate(release_date)}\n                </p>\n              </FilmDescWrapper>\n            </FilmInfoWrapper>\n          </LinkStyled>\n        </FilmCard>\n      ))}\n    </MovieList>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number,\n      release_date: PropTypes.string,\n    })\n  ),\n};\n","import styled from 'styled-components';\n\nexport const HomeTitle = styled.h1`\n  font-size: 60px;\n  font-weight: 700;\n  text-align: center;\n  margin-bottom: 20px;\n  font-family: 'Montserrat', sans-serif;\n  letter-spacing: -0.2px;\n  text-shadow: -2px -2px 5px #fff, 2px 2px 5px #babecc;\n`;\n","import { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { MoviesList } from '../../components/MoviesList/MoviesList';\nimport { Loader } from 'components/Loader/Loader';\nimport { HomeTitle } from './Home.styled';\n\nconst API_KEY = '579a7483bae7d6a5a25eb4c1ddded2cf';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst Home = () => {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setisLoading] = useState(false);\n\n  useEffect(() => {\n    setisLoading(true);\n    const getTrendMovies = async () => {\n      try {\n        const response = await axios.get(\n          `/trending/movie/day?api_key=${API_KEY}`\n        );\n        const moviesTrend = response.data.results;\n        setMovies(moviesTrend);\n        setisLoading(false);\n        return moviesTrend;\n      } catch (error) {\n        setisLoading(false);\n        console.log('Something went wrong in Home', error);\n      }\n    };\n    getTrendMovies();\n  }, []);\n\n  return (\n    <main>\n      <section>\n        {!isLoading && movies.length > 0 && (\n          <>\n            <HomeTitle>Trending a day</HomeTitle>\n            {movies.length > 0 && !isLoading && <MoviesList movies={movies} />}\n          </>\n        )}\n      </section>\n      {isLoading && <Loader />}\n    </main>\n  );\n};\n\nexport default Home;\n"],"names":["API_KEY","axios","getFilmById","movieId","response","movieInfo","data","console","log","getFilmByKeyword","movie","searchMovie","results","getFilmCast","cast","getFilmReviews","reviews","getDate","date","split","getPosterFilm","posterPath","getGenres","genres","map","genre","name","join","sliceVoteAverage","voteAverage","parseFloat","toFixed","getPecentageValue","sliceVote","percent","MovieList","styled","LinkStyled","Link","FilmCard","FilmInfoWrapper","FilmTitle","FilmDescWrapper","FilmPoster","MoviesList","movies","location","useLocation","id","poster_path","title","vote_average","release_date","to","state","from","src","alt","HomeTitle","useState","setMovies","isLoading","setisLoading","useEffect","getTrendMovies","moviesTrend","length","Loader"],"sourceRoot":""}