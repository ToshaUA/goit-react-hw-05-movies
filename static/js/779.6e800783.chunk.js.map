{"version":3,"file":"static/js/779.6e800783.chunk.js","mappings":"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","sources":["api/Api.js","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '579a7483bae7d6a5a25eb4c1ddded2cf';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\n\nexport const getFilmById = async movieId => {\n  try {\n    const response = await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n    const movieInfo = response.data;\n    return movieInfo;\n  } catch (error) {\n    console.log('Error in getFilmById', error);\n  }\n};\n\nexport const getFilmByKeyword = async movie => {\n  try {\n    const response = await axios.get(\n      `/search/movie?api_key=${API_KEY}&query=${movie}`\n    );\n    const searchMovie = response.data.results;\n    return searchMovie;\n  } catch (error) {\n    console.log('Error in getFilmByKeyword', error);\n  }\n};\n\nexport const getFilmCast = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/credits?api_key=${API_KEY}`\n    );\n    const cast = response.data.cast;\n    return cast;\n  } catch (error) {\n    console.log('Error in getFilmCast', error);\n  }\n};\n\nexport const getFilmReviews = async movieId => {\n  try {\n    const response = await axios.get(\n      `/movie/${movieId}/reviews?api_key=${API_KEY}`\n    );\n    const reviews = response.data.results;\n    return reviews;\n  } catch (error) {\n    console.log('Error in getFilmReviews', error);\n  }\n};\n\nexport function getDate(date) {\n  if (date) {\n    const year = date.split('-')[0];\n    return year;\n  }\n}\n\nexport function getPosterFilm(posterPath) {\n  if (posterPath) return `${BASE_IMG_URL}/${posterPath}`;\n  return 'https://www.jsconsulting.kz/assets/img/noImg.jpg';\n}\n\nexport function getGenres(genres) {\n  if (!genres) {\n    return;\n  }\n  const genresName = genres.map(genre => genre.name);\n  return genresName.join(', ');\n}\n\nexport function sliceVoteAverage(voteAverage) {\n  const sliceVoteAverage = parseFloat(voteAverage.toFixed(1));\n  return sliceVoteAverage;\n}\n\nexport function getPecentageValue(voteAverage) {\n  if (!voteAverage) {\n    return;\n  }\n  const sliceVote = sliceVoteAverage(voteAverage);\n  const percentValue = (sliceVote / 10) * 100;\n  const percent = parseFloat(percentValue.toFixed(1));\n  return `${percent}%`;\n}\n","import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 10px;\n`;\n\nexport const ReviewsItem = styled.li`\n  padding: 20px;\n  border-radius: 20px;\n  background: linear-gradient(145deg, #f0f0f0, #cacaca);\n  box-shadow: 20px 20px 60px #bebebe, -20px -20px 60px #ffffff;\n`;\n\nexport const ReviewsAuthor = styled.p`\n  font-weight: 700;\n  margin-bottom: 10px;\n  font-family: 'Montserrat', sans-serif;\n  text-shadow: -2px -2px 5px #fff, 2px 2px 5px #babecc;\n`;\n\nexport const ReviewsContent = styled.p`\n  text-align: justify;\n  text-shadow: -2px -2px 5px #fff, 2px 2px 5px #babecc;\n`;\n\nexport const NoReview = styled.div`\n  font-weight: 700;\n  color: red;\n  text-shadow: -2px -2px 5px #fff, 2px 2px 5px #babecc;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmReviews } from 'api/Api';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  ReviewsList,\n  ReviewsItem,\n  ReviewsAuthor,\n  ReviewsContent,\n  NoReview,\n} from './Reviews.styled';\nimport { Container } from 'style/Global.styled';\n\nconst Reviews = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getReviews = async () => {\n      try {\n        const reviews = await getFilmReviews(movieId);\n        setReviews(reviews);\n        setIsLoading(false);\n      } catch (error) {\n        setIsLoading(false);\n        console.log('Error in Reviews', error);\n      }\n    };\n    getReviews();\n  }, [movieId]);\n\n  if (!reviews) {\n    return;\n  }\n\n  return (\n    <Container>\n      {!isLoading && reviews.length > 0 && (\n        <ReviewsList>\n          {reviews.map(({ id, author, content }) => (\n            <ReviewsItem key={id}>\n              <ReviewsAuthor>Author: {author}</ReviewsAuthor>\n              <ReviewsContent>{content}</ReviewsContent>\n            </ReviewsItem>\n          ))}\n        </ReviewsList>\n      )}\n      {isLoading && <Loader />}\n      {reviews.length === 0 && !isLoading && (\n        <NoReview>\n          Unfortunately there is no review for this movie! ðŸ˜“{' '}\n        </NoReview>\n      )}\n    </Container>\n  );\n};\n\nexport default Reviews;\n"],"names":["API_KEY","axios","getFilmById","movieId","response","movieInfo","data","console","log","getFilmByKeyword","movie","searchMovie","results","getFilmCast","cast","getFilmReviews","reviews","getDate","date","split","getPosterFilm","posterPath","getGenres","genres","map","genre","name","join","sliceVoteAverage","voteAverage","parseFloat","toFixed","getPecentageValue","sliceVote","percent","ReviewsList","styled","ReviewsItem","ReviewsAuthor","ReviewsContent","NoReview","useState","setReviews","useParams","isLoading","setIsLoading","useEffect","getReviews","length","id","author","content","Loader"],"sourceRoot":""}